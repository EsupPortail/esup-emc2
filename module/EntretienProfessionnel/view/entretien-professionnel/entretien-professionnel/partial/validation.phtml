<?php

/**
 * @var EntretienProfessionnel $entretien
 * @var array $droits
 * @var int $step
 *
 * @var Agent[] $superieures
 * @var Agent[] $autorites
 */

use Application\Entity\Db\Agent;
use Application\Entity\Db\AgentAutorite;
use EntretienProfessionnel\Entity\Db\EntretienProfessionnel;
use EntretienProfessionnel\Provider\Observation\EntretienProfessionnelObservations;
use EntretienProfessionnel\Provider\Privilege\EntretienproPrivileges;
use EntretienProfessionnel\Provider\Validation\EntretienProfessionnelValidations;
use UnicaenObservation\Provider\Privilege\ObservationinstancePrivileges;

$canValiderAgent        = $this->isAllowed($entretien, EntretienproPrivileges::ENTRETIENPRO_VALIDER_AGENT);
$canValiderObservation  = $this->isAllowed($entretien, EntretienproPrivileges::ENTRETIENPRO_VALIDER_OBSERVATION);
$canValiderResponsable  = $this->isAllowed($entretien, EntretienproPrivileges::ENTRETIENPRO_VALIDER_RESPONSABLE);
$canValiderDrh          = $this->isAllowed($entretien, EntretienproPrivileges::ENTRETIENPRO_VALIDER_DRH);

$now = new DateTime();
$dateOk = ($now > $entretien->getDateEntretien());
$validationResponsable   = $entretien->getValidationActiveByTypeCode(EntretienProfessionnelValidations::VALIDATION_RESPONSABLE);
$validationObservation   = $entretien->getValidationActiveByTypeCode(EntretienProfessionnelValidations::VALIDATION_OBSERVATION);
$validationHierarchie    = $entretien->getValidationActiveByTypeCode(EntretienProfessionnelValidations::VALIDATION_DRH);
$validationAgent         = $entretien->getValidationActiveByTypeCode(EntretienProfessionnelValidations::VALIDATION_AGENT);


$now = new DateTime();

$date = $entretien->getMaxSaisiObservation();
$depasse = ($date === null or $date < $now);

$agent = $entretien->getAgent();
$responsable = $entretien->getResponsable();

// Filtrage du responsable de l'entretien pro parmi les autorités SAUF si inhiber par le corps (par exemple BIB).
$grades = $agent->getGradesActifs($entretien->getDateEntretien());
$inhibition = false;
foreach ($grades as $grade) {
    if ($grade->getCorps()->isSuperieurAsAutorite()) {
        $inhibition = true;
        break;
    }
}
if (!$inhibition) $autorites = array_filter($agent->getAutorites(), function(AgentAutorite $a) use ($responsable) { return $a->getAutorite() !== $responsable; });
else $autorites = $agent->getAutorites();


$observationEntretien = $entretien->getObservationWithTypeCode(EntretienProfessionnelObservations::OBSERVATION_AGENT_ENTRETIEN);
$observationFormation = $entretien->getObservationWithTypeCode(EntretienProfessionnelObservations::OBSERVATION_AGENT_FORMATION);
$observationPerspective = $entretien->getObservationWithTypeCode(EntretienProfessionnelObservations::OBSERVATION_AGENT_PERSPECTIVE);
$observationAutorite = $entretien->getObservationWithTypeCode(EntretienProfessionnelObservations::OBSERVATION_AUTORITE);
$observationFinale = $entretien->getObservationWithTypeCode(EntretienProfessionnelObservations::OBSERVATION_AGENT_FINALE);

?>

<h2 class="page-header-tab"> Validations </h2>

<?php if ($canValiderDrh === null) : ?>
    <div class="alert alert-warning">
        <span class="icon icon-attention"> </span>
        La validation de l'entretien professionnel provoquent un blocage des saisies de celui-ci.
    </div>
<?php endif; ?>

<div>
    <h3 class="categorie"> Validation du responsable de l'entretien professionnel </h3>

    <?php if ($step === 0) : ?>
        <div class="alert alert-info">
            <strong><span class="icon icon-information"></span> Le reponsable de l'entretien (<?php echo $entretien->getResponsable()->getDenomination(); ?>) doit valider l'entretien professionnel.</strong>
            <br/><br/>
            Cette validation :
            <ul>
                <li> fige les compte-rendus d'entretien professionnel et de formation ;</li>
                <li> rend visible les compte-rendus d'entretien professionnel et de formation à l'agent (<?php echo $entretien->getAgent()->getDenomination(); ?>);</li>
                <li> notifie l'agent (<?php echo $entretien->getAgent()->getDenomination(); ?>) que la phase d'observation est ouverte.</li>
            </ul>
        </div>
    <?php endif; ?>

    <?php if ($validationResponsable !== null) : ?>
        <?php echo $this->validationAfficher($validationResponsable); ?>

        <?php if ($canValiderResponsable and $validationObservation === null and $validationHierarchie === null) : ?>
                    <a
                        <?php /** @see \EntretienProfessionnel\Controller\EntretienProfessionnelController::revoquerValidationAction() */ ?>
                            href="<?php echo $this->url('entretien-professionnel/revoquer-validation', ['entretien-professionnel' => $entretien->getId(), 'validation' => $validationResponsable->getId()], [], true); ?>"
                            class="btn btn-danger"
                    >
                        <span class="icon icon-unchecked"></span>
                        Révoquer la validation
                    </a>
        <?php endif; ?>
    <?php else : ?>
        <div class="alert alert-warning">
            <strong>
                <span class="icon icon-attention"></span>
                La validation du responsable d'entretien professionnel n'est pas encore réalisée.
            </strong>
        </div>
        <?php if ($canValiderResponsable) : ?>
            <a
                <?php /** @see \EntretienProfessionnel\Controller\EntretienProfessionnelController::validerElementAction() */ ?>
                    href="<?php echo $this->url('entretien-professionnel/valider-element', ['entretien' => $entretien->getId(), 'type' => EntretienProfessionnelValidations::VALIDATION_RESPONSABLE], [], true); ?>"
                    class="btn btn-success action ajax-modal"
                    data-event="modification"
            >
                <span class="icon icon-checked"></span>
                Validation du responsable
            </a>
        <?php endif; ?>
    <?php endif; ?>
</div>


<div>
    <h3 class="categorie"> Expression des observations </h3>

    <?php if ($step < 1) : ?>
        <div class="alert alert-warning">
            <strong>
                <span class="icon icon-information"></span>
                Ne sera disponible qu'après la validation du responsable d'entretien professionnel
            </strong>
        </div>
    <?php endif; ?>

    <?php if ($step === 1) : ?>
        <div class="alert alert-info">
            <strong><span class="icon icon-information"></span> L'agent (<?php echo $entretien->getAgent()->getDenomination(); ?>) peut maintenant exprimer des observations.</strong>
            <br/><br/>
            Une fois les observations faites, en validant l'agent :
            <ul>
                <li> fige ses observations ;</li>
                <li> notifie son responsable d'entretien (<?php echo $entretien->getResponsable()->getDenomination(); ?>) des observations apportées ;</li>
                <li> notifie ses autorités hiérarchiques pour validation auprès d'eux de l'entretien professionnel.</li>
            </ul>
            Ces observations sont facultatives et l'agent peut exprimer le fait de ne pas vouloir faire d'observation.
            <br/><br/>
            <strong><span class="icon icon-information"></span> L'expression d'observations et leur validation n'est possible que durant les 8 jours suivants la validation de l'entretien professionnel par son responsable
                (c'est-à-dire le <?php echo ($entretien->getMaxSaisiObservation())?$entretien->getMaxSaisiObservation()->format("d/m/Y à H:i"):"Inconnue"; ?>).
            </strong>
        </div>
    <?php endif; ?>

    <div id="observations">
    <?php
        $optionsObservationsAgent = [];
        if ($step !== 1) {
            $optionsObservationsAgent['can-modifier'] = false;
            $optionsObservationsAgent['can-historiser'] = false;
            $optionsObservationsAgent['can-supprimer'] = false;
        } else {
            $optionsObservationsAgent['can-modifier'] = $canValiderObservation && $this->isAllowed(ObservationinstancePrivileges::getResourceId(ObservationinstancePrivileges::OBSERVATIONINSTANCE_MODIFIER));
            $optionsObservationsAgent['can-historiser'] = $canValiderObservation && $this->isAllowed(ObservationinstancePrivileges::getResourceId(ObservationinstancePrivileges::OBSERVATIONINSTANCE_HISTORISER));
        }
    ?>

    <?php if ($observationPerspective === null) : ?>
        <?php if ($step === 1) : ?>
            <?php /** @see \EntretienProfessionnel\Controller\ObservationController::ajouterAgentAction() */ ?>
            <a href="<?php echo $this->url('entretien-professionnel/observation/agent/ajouter', ['entretien-professionnel' => $entretien->getId(), 'type' => EntretienProfessionnelObservations::OBSERVATION_AGENT_PERSPECTIVE], [], true); ?>"
               class="btn btn-primary ajax-modal" data-event="modification">
                Ajouter une observation à propos des perspectives
            </a>
        <?php endif; ?>

    <?php if ($observationEntretien === null) : ?>
        <?php if ($step === 1) : ?>
            <?php /** @see \EntretienProfessionnel\Controller\ObservationController::ajouterAgentAction() */ ?>
            <a href="<?php echo $this->url('entretien-professionnel/observation/agent/ajouter', ['entretien-professionnel' => $entretien->getId(), 'type' => EntretienProfessionnelObservations::OBSERVATION_AGENT_ENTRETIEN], [], true); ?>"
               class="btn btn-primary ajax-modal" data-event="modification">
                Ajouter une observation à propos du déroulement de l'entretien
            </a>
        <?php endif; ?>
    <?php else : ?>
        <?php echo $this->observationinstance($observationEntretien, $optionsObservationsAgent); ?>
    <?php endif; ?>

    <?php if ($observationFormation === null) : ?>
        <?php if ($step === 1) : ?>
            <?php /** @see \EntretienProfessionnel\Controller\ObservationController::ajouterAgentAction() */ ?>
            <a href="<?php echo $this->url('entretien-professionnel/observation/agent/ajouter', ['entretien-professionnel' => $entretien->getId(), 'type' => EntretienProfessionnelObservations::OBSERVATION_AGENT_FORMATION], [], true); ?>"
               class="btn btn-primary ajax-modal" data-event="modification">
                Ajouter une observation à propos l'entretien de formation
            </a>
        <?php endif; ?>
    <?php else : ?>
        <?php echo $this->observationinstance($observationFormation, $optionsObservationsAgent); ?>
    <?php endif; ?>


    <?php else : ?>
        <?php echo $this->observationinstance($observationPerspective, $optionsObservationsAgent); ?>
    <?php endif; ?>

    <?php if ($validationObservation) : ?>
        <?php echo $this->validationAfficher($validationObservation); ?>
    <?php endif; ?>
    </div>

    <div>
    <?php if ($step === 1) : ?>
        <?php if ($canValiderObservation) : ?>
            <?php if ($observationEntretien || $observationPerspective) : ?>
                <a
                    <?php /** @see \EntretienProfessionnel\Controller\EntretienProfessionnelController::validerElementAction() */ ?>
                        href="<?php echo $this->url('entretien-professionnel/valider-element', ['entretien' => $entretien->getId(), 'type' => EntretienProfessionnelValidations::VALIDATION_OBSERVATION], [], true); ?>"
                        class="btn btn-success action ajax-modal"
                        data-event="modification"
                >
                    <span class="icon icon-checked"></span>
                    Je clôs la phase d'émission d'observations
                </a>
            <?php else : ?>
                <a
                    <?php /** @see \EntretienProfessionnel\Controller\EntretienProfessionnelController::validerElementAction() */ ?>
                        href="<?php echo $this->url('entretien-professionnel/valider-element', ['entretien' => $entretien->getId(), 'type' => EntretienProfessionnelValidations::VALIDATION_OBSERVATION], [], true); ?>"
                        class="btn btn-success action ajax-modal"
                        data-event="modification"
                >
                    <span class="icon icon-checked"></span>
                    Je ne fais pas d'observation
                </a>
            <?php endif; ?>
        <?php endif; ?>
    <?php endif; ?>
    </div>

    <?php if ($validationObservation and $validationHierarchie === null) : ?>
        <a
            <?php /** @see \EntretienProfessionnel\Controller\EntretienProfessionnelController::revoquerValidationAction() */ ?>
                href="<?php echo $this->url('entretien-professionnel/revoquer-validation', ['entretien-professionnel' => $entretien->getId(), 'validation' => $validationObservation->getId()], [], true); ?>"
                class="btn btn-danger"
        >
            <span class="icon icon-unchecked"></span>
            Révoquer la validation
        </a>
    <?php endif; ?>
</div>

<div>
    <h3 class="categorie"> Validation de l'autorité hiérarchique </h3>

    <?php if ($step === 2) : ?>
        <div class="alert alert-info">
            <strong><span class="icon icon-information"></span> L'autorité hiérarchique de l'agent (<?php echo $entretien->getAgent()->getDenomination(); ?>) peut valider l'entretien professionnel.</strong>
            <br/><br/>
            Une fois cette validation faite :
            <ul>
                <li> notifie l'agent (<?php echo $entretien->getAgent()->getDenomination(); ?>) de la validation.</li>
            </ul>

            Liste des personnes pouvant valider en tant qu'autorité hiérarchique :
            <ul>
                <?php foreach ($autorites as $autorite) {
                    echo "<li>".$autorite->getAutorite()->getDenomination()."</li>";
                }
                ?>
            </ul>
        </div>

        <?php
        $optionsObservationsAutorite = [];
        if ($step !== 2) {
            $optionsObservationsAutorite['can-modifier'] = false;
            $optionsObservationsAutorite['can-historiser'] = false;
            $optionsObservationsAutorite['can-supprimer'] = false;
        } else {
            $optionsObservationsAutorite['can-modifier'] = $canValiderDrh;
            $optionsObservationsAutorite['can-historiser'] = $canValiderDrh;
        }
        ?>

        <?php if ($observationAutorite === null) : ?>
            <a href="<?php echo $this->url('entretien-professionnel/observation/autorite/ajouter', ['entretien-professionnel' => $entretien->getId()], [], true); ?>"
               class="btn btn-primary ajax-modal" data-event="modification">
                Ajouter une observation
            </a>
        <?php else : ?>
            <?php echo $this->observationinstance($observationAutorite,$optionsObservationsAutorite); ?>
        <?php endif; ?>
    <?php endif; ?>

    <?php if ($step < 2) : ?>
        <div class="alert alert-warning">
            <strong>
                <span class="icon icon-information"></span>
                Ne sera disponible qu'après la validation des observations ou le dépassement du délai d'expression des observations.
            </strong>
        </div>
    <?php endif; ?>

    <?php if ($validationHierarchie !== null) : ?>
        <?php echo $this->validationAfficher($validationHierarchie); ?>
        <?php if ($canValiderDrh AND $validationAgent === null) : ?>
            <a
                <?php /** @see \EntretienProfessionnel\Controller\EntretienProfessionnelController::revoquerValidationAction() */ ?>
                    href="<?php echo $this->url('entretien-professionnel/revoquer-validation', ['entretien-professionnel' => $entretien->getId(), 'validation' => $validationHierarchie->getId()], [], true); ?>"
                    class="btn btn-danger action"
            >
                <span class="icon icon-unchecked"></span>
                Révoquer la validation
            </a>
        <?php endif; ?>
   <?php else : ?>
        <?php if ($canValiderDrh AND $validationResponsable AND ($validationObservation !== null OR $depasse)) : ?>
            <a
                <?php /** @see \EntretienProfessionnel\Controller\EntretienProfessionnelController::validerElementAction() */ ?>
                    href="<?php echo $this->url('entretien-professionnel/valider-element', ['entretien' => $entretien->getId(), 'type' => EntretienProfessionnelValidations::VALIDATION_DRH], [], true); ?>"
                    class="btn btn-success action ajax-modal"
                    data-event="modification"
            >
                <span class="icon icon-checked"></span>
                Validation de l'autorité
            </a>
        <?php endif; ?>
    <?php endif; ?>
</div>

<div>
    <h3 class="categorie"> Visa de l'agent </h3>

    <?php if ($step === 3) : ?>
        <div class="alert alert-info">
            <strong>
                <span class="icon icon-information"></span>
                L'agent (<?php echo $entretien->getAgent()->getDenomination(); ?>) peut maintenant viser son entretien professionnel.
            </strong>
            <br/><br/>

            Ce visa :
            <ul>
                <li> clôture l'entretien professionnel ; </li>
                <li> permet l'ouverture des procédures de recours (hors de cette application). </li>
            </ul>
        </div>
    <?php endif; ?>


        <div id="observation_finale">
            <?php
            $optionsObservationsFinale = [];
            if ($step !== 3) {
                $optionsObservationsFinale['can-modifier'] = false;
                $optionsObservationsFinale['can-historiser'] = false;
                $optionsObservationsFinale['can-supprimer'] = false;
            } else {
                $optionsObservationsFinale['can-modifier'] = $canValiderAgent && $this->isAllowed(ObservationinstancePrivileges::getResourceId(ObservationinstancePrivileges::OBSERVATIONINSTANCE_MODIFIER));
                $optionsObservationsFinale['can-historiser'] = $canValiderAgent && $this->isAllowed(ObservationinstancePrivileges::getResourceId(ObservationinstancePrivileges::OBSERVATIONINSTANCE_HISTORISER));
            }
            ?>

            <?php if ($observationFinale === null) : ?>
                <?php if ($step === 3) : ?>
                    <?php /** @see \EntretienProfessionnel\Controller\ObservationController::ajouterAgentAction() */ ?>
                    <a href="<?php echo $this->url('entretien-professionnel/observation/agent/ajouter', ['entretien-professionnel' => $entretien->getId(), 'type' => EntretienProfessionnelObservations::OBSERVATION_AGENT_FINALE], [], true); ?>"
                       class="btn btn-primary ajax-modal" data-event="modification">
                        Ajouter une observation finale
                    </a>
                <?php endif; ?>
            <?php else : ?>
                <?php echo $this->observationinstance($observationFinale, $optionsObservationsFinale); ?>
            <?php endif; ?>
        </div>

    <?php if ($step < 3) : ?>
        <div class="alert alert-warning">
            <strong>
                <span class="icon icon-information"></span>
                Ne sera disponible qu'après la validation de l'autorité hiérarchique.
            </strong>
        </div>
    <?php endif; ?>

    <?php if ($validationAgent !== null) : ?>
        <div class="alert alert-success">
            <strong>Visa effectué par l'agent</strong><br>
            Visé le <?php echo $validationAgent->getHistoModification()->format('d/m/y à H:i:s'); ?> par <?php echo $validationAgent->getHistoModificateur()->getDisplayName(); ?>.
        </div>
        <?php if ($canValiderAgent AND $entretien->getCampagne()->estEnCours()) : ?>
            <a
                <?php /** @see \EntretienProfessionnel\Controller\EntretienProfessionnelController::revoquerValidationAction() */ ?>
                    href="<?php echo $this->url('entretien-professionnel/revoquer-validation', ['entretien-professionnel' => $entretien->getId(), 'validation' => $validationAgent->getId()], [], true); ?>"
                    class="btn btn-danger action"
            >
                <span class="icon icon-unchecked"></span>
                Révoquer la validation
            </a>
        <?php endif; ?>
    <?php else : ?>
        <?php if ($canValiderAgent AND $validationHierarchie !== null) : ?>
            <a
                <?php /** @see \EntretienProfessionnel\Controller\EntretienProfessionnelController::validerElementAction() */ ?>
                    href="<?php echo $this->url('entretien-professionnel/valider-element', ['entretien' => $entretien->getId(), 'type' => EntretienProfessionnelValidations::VALIDATION_AGENT], [], true); ?>"
                    class="btn btn-success action ajax-modal"
                    data-event="modification"
            >
                <span class="icon icon-checked"></span>
                Validation de l'agent
            </a>
        <?php endif; ?>
    <?php endif; ?>
</div>
